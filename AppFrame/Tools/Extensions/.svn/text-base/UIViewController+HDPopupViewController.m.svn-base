//
//  UIViewController+HDPopupViewController.m
//  VenusIphone
//
//  Created by wanghaibo on 12-7-16.
//  Copyright (c) 2012å¹´ __MyCompanyName__. All rights reserved.
//

#import "UIViewController+HDPopupViewController.h"
#import <QuartzCore/QuartzCore.h>
#define kPopupModalAnimationDuration 0.35
#define kHDPopupViewTag 23942
#define kHDBackgroundViewTag 23943
#define kHDSourceViewTag 23941
#define kHDLoadingViewTag 23946
@interface UIViewController (HDPopupViewControllerPrivate)
- (UIView*)topView;
- (void)presentPopupView:(UIView*)popupView;
@end

@implementation UIViewController (HDPopupViewController)

#pragma mark --- Fade

- (BOOL)popViewDissmissWhenClick {
    return YES;
    //return self.popViewDissmissWhenClick;// return [NSOBJECT_DYNAMIC_PROPERTY_GET(UIViewController, popViewDissmissWhenClick) boolValue];
}

- (void)setPopViewDissmissWhenClick:(BOOL)val
{
    //NSOBJECT_DYNAMIC_PROPERTY_SET(UIViewController, popViewDissmissWhenClick, RETAIN_NONATOMIC, @(val));
}

- (void)fadeViewIn:(UIView*)popupView sourceView:(UIView*)sourceView overlayView:(UIView*)overlayView
{
    UIView *backgroundView = [overlayView viewWithTag:kHDBackgroundViewTag];
    // Generating Start and Stop Positions
    CGSize sourceSize = sourceView.bounds.size;
    CGSize popupSize = popupView.bounds.size;
    CGRect popupEndRect = CGRectMake((sourceSize.width - popupSize.width) / 2, 
                                     (sourceSize.height - popupSize.height) / 2,
                                     popupSize.width, 
                                     popupSize.height);
    
    // Set starting properties
    popupView.frame = popupEndRect;
    popupView.alpha = 0.0f;
    
    [UIView animateWithDuration:kPopupModalAnimationDuration animations:^{
        backgroundView.alpha = 1.0f;
        popupView.alpha = 1.0f;
    } completion:^(BOOL finished) {
    }];
}

- (void)fadeViewOut:(UIView*)popupView sourceView:(UIView*)sourceView overlayView:(UIView*)overlayView completion:(void (^)(BOOL finished)) fadeViewOutCompletion
{
    UIView *backgroundView = [overlayView viewWithTag:kHDBackgroundViewTag];
    [UIView animateWithDuration:kPopupModalAnimationDuration animations:^{
        backgroundView.alpha = 0.0f;
        popupView.alpha = 0.0f;
    } completion:^(BOOL finished) {
        if(fadeViewOutCompletion !=nil)
            fadeViewOutCompletion(YES);
        [self disposePopupViewController];
        [popupView removeFromSuperview];
        [overlayView removeFromSuperview];
    }];
}

//////////////////////////////////////////////////////////////////////////////
#pragma mark -
#pragma mark Animations

#pragma mark --- Slide

- (void)slideViewIn:(UIView*)popupView sourceView:(UIView*)sourceView overlayView:(UIView*)overlayView withAnimationType:(HDPopupViewAnimation)animationType
{
    UIView *backgroundView = [overlayView viewWithTag:kHDBackgroundViewTag];
    // Generating Start and Stop Positions
    CGSize sourceSize = sourceView.bounds.size;
    CGSize popupSize = popupView.bounds.size;
    CGRect popupStartRect;
    switch (animationType) {
        case HDPopupViewAnimationSlideBottomTop:
        case HDPopupViewAnimationSlideBottomBottom:
            popupStartRect = CGRectMake((sourceSize.width - popupSize.width) / 2, 
                                        sourceSize.height + popupSize.height, 
                                        popupSize.width, 
                                        popupSize.height);
            
            break;
        case HDPopupViewAnimationSlideLeftRight:
            popupStartRect = CGRectMake(-sourceSize.width, 
                                        (sourceSize.height - popupSize.height) / 2,
                                        popupSize.width, 
                                        popupSize.height);
            break;
            
        default:
            popupStartRect = CGRectMake(sourceSize.width, 
                                        (sourceSize.height - popupSize.height) / 2,
                                        popupSize.width, 
                                        popupSize.height);
            break;
    }        
    CGRect popupEndRect = CGRectMake((sourceSize.width - popupSize.width) / 2, 
                                     (sourceSize.height - popupSize.height),
                                     popupSize.width, 
                                     popupSize.height);
    // NSLog(@"source y = %f  pop y = %f",sourceSize.height, popupSize.height);
    //  NSLog(@"start y =%f  end y=%f",popupStartRect.origin.y, popupEndRect.origin.y);
    // Set starting properties
    popupView.frame = popupStartRect;
    popupView.alpha = 1.0f;
    [UIView animateWithDuration:kPopupModalAnimationDuration delay:0.0f options:UIViewAnimationOptionCurveEaseOut animations:^{
        backgroundView.alpha = 1.0f;
        popupView.frame = popupEndRect;
    } completion:^(BOOL finished) {
    }];
}

- (void)slideViewOut:(UIView*)popupView sourceView:(UIView*)sourceView overlayView:(UIView*)overlayView withAnimationType:(HDPopupViewAnimation)animationType completion:(void (^)(BOOL finished))slideViewOutCompletion
{
    UIView *backgroundView = [overlayView viewWithTag:kHDBackgroundViewTag];
    // Generating Start and Stop Positions
    CGSize sourceSize = sourceView.bounds.size;
    CGSize popupSize = popupView.bounds.size;
    CGRect popupEndRect;
    switch (animationType) {
        case HDPopupViewAnimationSlideBottomTop:
            popupEndRect = CGRectMake((sourceSize.width - popupSize.width) / 2, 
                                      -popupSize.height, 
                                      popupSize.width, 
                                      popupSize.height);
            break;
        case HDPopupViewAnimationSlideBottomBottom:
            popupEndRect = CGRectMake((sourceSize.width - popupSize.width) / 2, 
                                      sourceSize.height, 
                                      popupSize.width, 
                                      popupSize.height);
            break;
        case HDPopupViewAnimationSlideLeftRight:
            popupEndRect = CGRectMake(sourceSize.width, 
                                      popupView.frame.origin.y, 
                                      popupSize.width, 
                                      popupSize.height);
            break;
        default:
            popupEndRect = CGRectMake(-popupSize.width, 
                                      popupView.frame.origin.y, 
                                      popupSize.width, 
                                      popupSize.height);
            break;
    }
    
    
    [UIView animateWithDuration:kPopupModalAnimationDuration delay:0.0f options:UIViewAnimationOptionCurveEaseIn animations:^{
        popupView.frame = popupEndRect;
        backgroundView.alpha = 0.0f;
    } completion:^(BOOL finished) {
        [self disposePopupViewController];
        if(slideViewOutCompletion)
            slideViewOutCompletion(YES);
        [popupView removeFromSuperview];
        [overlayView removeFromSuperview];
        
    }];
}


////////////////////////////////////////////////////////////////////////////
#pragma mark -
#pragma mark View Handling
- (void)presentPopupViewController:(UIView*)popupView animationType:(HDPopupViewAnimation)animationType dismissWhenClickBackGround:(BOOL) dismissWhenClick InView:(UIView *) topView
{
    self.popViewDissmissWhenClick = dismissWhenClick;
    UIView *sourceView = topView;
    sourceView.tag = kHDSourceViewTag;
    popupView.autoresizingMask = UIViewAutoresizingFlexibleTopMargin | UIViewAutoresizingFlexibleLeftMargin |UIViewAutoresizingFlexibleBottomMargin | UIViewAutoresizingFlexibleRightMargin;
    popupView.tag = kHDPopupViewTag;
    
    // check if source view controller is not in destination
    if ([sourceView.subviews containsObject:popupView]) return;
    
    // customize popupView
    popupView.layer.shadowPath = [UIBezierPath bezierPathWithRect:popupView.bounds].CGPath;
    popupView.layer.masksToBounds = NO;
    
    /*popupView.layer.shadowOffset = CGSizeMake(5, 5);
     popupView.layer.shadowRadius = 5;
     popupView.layer.shadowOpacity = 0.5;*/
    
    // Add semi overlay
    UIView *overlayView = [[UIView alloc] initWithFrame:sourceView.bounds];
    overlayView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
    overlayView.tag = kHDOverlayViewTag;
    overlayView.backgroundColor = [UIColor clearColor];
    
    // BackgroundView
    
    UIView *backgroundView = [[UIView alloc] initWithFrame:sourceView.bounds];
    backgroundView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
    backgroundView.tag = kHDBackgroundViewTag;
    backgroundView.backgroundColor = [UIColor colorWithRed:0.0 green:0.0 blue:0.0 alpha:0.4];
    backgroundView.alpha = 0.0f;
    [overlayView addSubview:backgroundView];
    [backgroundView release];
    
    
    // Make the Background Clickable
    UIButton * dismissButton = [UIButton buttonWithType:UIButtonTypeCustom];
    dismissButton.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
    dismissButton.backgroundColor = [UIColor clearColor];
    dismissButton.frame = sourceView.bounds;
    [overlayView addSubview:dismissButton];
    
    popupView.alpha = 0.0f;
    [overlayView addSubview:popupView];
    [sourceView addSubview:overlayView];
    [overlayView release];
    if (self.popViewDissmissWhenClick) {
        [dismissButton addTarget:self action:@selector(doPredissmissPopViewController:) forControlEvents:UIControlEventTouchUpInside];
    }
    switch (animationType) {
        case HDPopupViewAnimationSlideBottomTop:
        case HDPopupViewAnimationSlideBottomBottom:
        case HDPopupViewAnimationSlideRightLeft:
        case HDPopupViewAnimationSlideLeftRight:
            dismissButton.tag = animationType;
            [self slideViewIn:popupView sourceView:sourceView overlayView:overlayView withAnimationType:animationType];
            break;
        default:
            dismissButton.tag = HDPopupViewAnimationFade;
            [self fadeViewIn:popupView sourceView:sourceView overlayView:overlayView];
            break;
    }    
    
}
- (void)presentPopupView:(UIView*)popupView animationType:(HDPopupViewAnimation)animationType dismissWhenClickBackGround : (BOOL) dismissWhenClick
{
    self.popViewDissmissWhenClick = dismissWhenClick;
    UIView *sourceView = [self topView];
    sourceView.tag = kHDSourceViewTag;
    popupView.autoresizingMask = UIViewAutoresizingFlexibleTopMargin | UIViewAutoresizingFlexibleLeftMargin |UIViewAutoresizingFlexibleBottomMargin | UIViewAutoresizingFlexibleRightMargin | UIViewAutoresizingFlexibleWidth;
    popupView.tag = kHDPopupViewTag;
    
    // check if source view controller is not in destination
    if ([sourceView.subviews containsObject:popupView]) return;
    
    // customize popupView
    popupView.layer.shadowPath = [UIBezierPath bezierPathWithRect:popupView.bounds].CGPath;
    popupView.layer.masksToBounds = NO;
    
    /*popupView.layer.shadowOffset = CGSizeMake(5, 5);
     popupView.layer.shadowRadius = 5;
     popupView.layer.shadowOpacity = 0.5;*/
    
    // Add semi overlay
    UIView *overlayView = [[UIView alloc] initWithFrame:sourceView.bounds];
    overlayView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
    overlayView.tag = kHDOverlayViewTag;
    overlayView.backgroundColor = [UIColor clearColor];
    
    // BackgroundView
    
    UIView *backgroundView = [[UIView alloc] initWithFrame:sourceView.bounds];
    backgroundView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
    backgroundView.tag = kHDBackgroundViewTag;
    backgroundView.backgroundColor = [UIColor colorWithRed:0.0 green:0.0 blue:0.0 alpha:0.4];
    backgroundView.alpha = 0.0f;
    [overlayView addSubview:backgroundView];
    [backgroundView release];
    
    
    // Make the Background Clickable
    UIButton * dismissButton = [UIButton buttonWithType:UIButtonTypeCustom];
    dismissButton.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
    dismissButton.backgroundColor = [UIColor clearColor];
    dismissButton.frame = sourceView.bounds;
    [overlayView addSubview:dismissButton];
    
    popupView.alpha = 0.0f;
    [overlayView addSubview:popupView];
    [sourceView addSubview:overlayView];
    [overlayView release];
    if (dismissWhenClick) {
        [dismissButton addTarget:self action:@selector(doPredissmissPopViewController:) forControlEvents:UIControlEventTouchUpInside];
    }else{
        [dismissButton addTarget:self action:@selector(didClickBackgound:) forControlEvents:UIControlEventTouchUpInside];
    }
    switch (animationType) {
        case HDPopupViewAnimationSlideBottomTop:
        case HDPopupViewAnimationSlideBottomBottom:
        case HDPopupViewAnimationSlideRightLeft:
        case HDPopupViewAnimationSlideLeftRight:
            dismissButton.tag = animationType;
            [self slideViewIn:popupView sourceView:sourceView overlayView:overlayView withAnimationType:animationType];
            break;
        default:
            dismissButton.tag = HDPopupViewAnimationFade;
            [self fadeViewIn:popupView sourceView:sourceView overlayView:overlayView];
            break;
    }    
}

-(UIView*)topView {
    UIViewController *recentView = self;
    
/*
    if ([[[UIDevice currentDevice] systemVersion] floatValue] < 5.0) {
        
        recentView =   hdGetAppDelegate().tabBarController;
    }
    else {
   
        while (recentView.parentViewController != nil ) {
            recentView = recentView.parentViewController;
        }
    }*/
    recentView =  BXGetAppDelegate().topmostViewController;//BXGetAppDelegate().tabBar

    return recentView.view;
}
-(void) disposePopupViewController 
{
    
}
- (void)doPredissmissPopViewController:(id)sender
{
    if (self.popViewDissmissWhenClick) {
        [self dismissPopupViewControllerWithanimation:sender];
    }
}

- (void)didClickBackgound:(id)sender{

}

- (void)dismissPopupViewControllerWithanimation:(id)sender
{
    if ([sender isKindOfClass:[UIButton class]]) {
        UIButton* dismissButton = sender;
        switch (dismissButton.tag) {
            case HDPopupViewAnimationSlideBottomTop:
            case HDPopupViewAnimationSlideBottomBottom:
            case HDPopupViewAnimationSlideRightLeft:
            case HDPopupViewAnimationSlideLeftRight:
                [self dismissPopupViewControllerWithanimationType:dismissButton.tag completion:^(BOOL finished) {
                    
                    
                } ];
                break;
            default:
                [self dismissPopupViewControllerWithanimationType:HDPopupViewAnimationFade completion:^(BOOL finished){
                    
                }];
                break;
        }
    } else {
        [self dismissPopupViewControllerWithanimationType:HDPopupViewAnimationFade completion:^(BOOL finished) {
            
        }];
    }
}

////////////////////////////////////////////////////////////////////////////
#pragma mark -
#pragma mark Public



- (void)presentPopupViewController:(UIView *)popupView animationType:(HDPopupViewAnimation)animationType dismissWhenClickBackGround:(BOOL) dismissWhenClick
{
    
    [self presentPopupView:popupView animationType:animationType dismissWhenClickBackGround:dismissWhenClick];
}
- (void)dismissPopupViewControllerWithanimationType:(HDPopupViewAnimation)animationType InView:(UIView *)topView completion:(void (^)(BOOL finished))completion
{
    UIView *sourceView = topView;
    UIView *popupView = [sourceView viewWithTag:kHDPopupViewTag];
    UIView *overlayView = [sourceView viewWithTag:kHDOverlayViewTag];
    
    switch (animationType) {
        case HDPopupViewAnimationSlideBottomTop:
        case HDPopupViewAnimationSlideBottomBottom:
        case HDPopupViewAnimationSlideRightLeft:
        case HDPopupViewAnimationSlideLeftRight:
            [self slideViewOut:popupView sourceView:sourceView overlayView:overlayView withAnimationType:animationType completion:completion];
            break;
            
        default:
            [self fadeViewOut:popupView sourceView:sourceView overlayView:overlayView completion:completion];
            break;
    }
    
}
- (void)dismissPopupViewControllerWithanimationType:(HDPopupViewAnimation)animationType completion:(void (^)(BOOL finished))completion
{
    UIView *sourceView = [self topView];
    UIView *popupView = [sourceView viewWithTag:kHDPopupViewTag];
    UIView *overlayView = [sourceView viewWithTag:kHDOverlayViewTag];
    
    switch (animationType) {
        case HDPopupViewAnimationSlideBottomTop:
        case HDPopupViewAnimationSlideBottomBottom:
        case HDPopupViewAnimationSlideRightLeft:
        case HDPopupViewAnimationSlideLeftRight:
            [self slideViewOut:popupView sourceView:sourceView overlayView:overlayView withAnimationType:animationType completion:completion];
            break;
            
        default:
            [self fadeViewOut:popupView sourceView:sourceView overlayView:overlayView completion:completion];
            break;
    }
}


//-(void)showLoadAnimation
//{
//    HDLoadingView *loadingView = (HDLoadingView*)[self.view viewWithTag:kHDLoadingViewTag];
//    if (!loadingView) {
//        loadingView = [[HDLoadingView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height) Type:HDLoadingViewType_All];
//        loadingView.tag = kHDLoadingViewTag;
//        [self.view addSubview:loadingView];
//        if (loadingView.frame.origin.y != 0) {
//            loadingView.frame = CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height);
//        }
//        [self.view bringSubviewToFront:loadingView];
//        [loadingView release];
//    }
//}
//
//-(void)dismissLoadAnimation
//{
//    HDLoadingView *loadingView = (HDLoadingView*)[self.view viewWithTag:kHDLoadingViewTag];
//    if (loadingView) {
//        [UIView animateWithDuration:.6 animations:^{
//            loadingView.alpha = 0;
//        } completion:^(BOOL finish)
//         {
//            [loadingView removeFromSuperview];
//         }];
//    }
//}
@end
